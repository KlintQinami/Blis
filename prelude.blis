/* This file is included before any program compiled by the Blis compiler.
 * It is used to implement all the built-in functions that can be implemented
 * in Blis, instead of using a C library or GLSL built-in function.
 */

/* Keyboard & mouse constants copied from the GLFW header */

/* Printable keys */
const int KEY_SPACE =              32;
const int KEY_APOSTROPHE =         39;  /* ' */
const int KEY_COMMA =              44;  /* , */
const int KEY_MINUS =              45;  /* - */
const int KEY_PERIOD =             46;  /* . */
const int KEY_SLASH =              47;  /* / */
const int KEY_0 =                  48;
const int KEY_1 =                  49;
const int KEY_2 =                  50;
const int KEY_3 =                  51;
const int KEY_4 =                  52;
const int KEY_5 =                  53;
const int KEY_6 =                  54;
const int KEY_7 =                  55;
const int KEY_8 =                  56;
const int KEY_9 =                  57;
const int KEY_SEMICOLON =          59;  /* ; */
const int KEY_EQUAL =              61;  /* = */
const int KEY_A =                  65;
const int KEY_B =                  66;
const int KEY_C =                  67;
const int KEY_D =                  68;
const int KEY_E =                  69;
const int KEY_F =                  70;
const int KEY_G =                  71;
const int KEY_H =                  72;
const int KEY_I =                  73;
const int KEY_J =                  74;
const int KEY_K =                  75;
const int KEY_L =                  76;
const int KEY_M =                  77;
const int KEY_N =                  78;
const int KEY_O =                  79;
const int KEY_P =                  80;
const int KEY_Q =                  81;
const int KEY_R =                  82;
const int KEY_S =                  83;
const int KEY_T =                  84;
const int KEY_U =                  85;
const int KEY_V =                  86;
const int KEY_W =                  87;
const int KEY_X =                  88;
const int KEY_Y =                  89;
const int KEY_Z =                  90;
const int KEY_LEFT_BRACKET =       91;  /* [ */
const int KEY_BACKSLASH =          92;  /* \ */
const int KEY_RIGHT_BRACKET =      93;  /* ] */
const int KEY_GRAVE_ACCENT =       96;  /* ` */
const int KEY_WORLD_1 =            161; /* non-US #1 */
const int KEY_WORLD_2 =            162; /* non-US #2 */

/* Function keys */
const int KEY_ESCAPE =             256;
const int KEY_ENTER =              257;
const int KEY_TAB =                258;
const int KEY_BACKSPACE =          259;
const int KEY_INSERT =             260;
const int KEY_DELETE =             261;
const int KEY_RIGHT =              262;
const int KEY_LEFT =               263;
const int KEY_DOWN =               264;
const int KEY_UP =                 265;
const int KEY_PAGE_UP =            266;
const int KEY_PAGE_DOWN =          267;
const int KEY_HOME =               268;
const int KEY_END =                269;
const int KEY_CAPS_LOCK =          280;
const int KEY_SCROLL_LOCK =        281;
const int KEY_NUM_LOCK =           282;
const int KEY_PRINT_SCREEN =       283;
const int KEY_PAUSE =              284;
const int KEY_F1 =                 290;
const int KEY_F2 =                 291;
const int KEY_F3 =                 292;
const int KEY_F4 =                 293;
const int KEY_F5 =                 294;
const int KEY_F6 =                 295;
const int KEY_F7 =                 296;
const int KEY_F8 =                 297;
const int KEY_F9 =                 298;
const int KEY_F10 =                299;
const int KEY_F11 =                300;
const int KEY_F12 =                301;
const int KEY_F13 =                302;
const int KEY_F14 =                303;
const int KEY_F15 =                304;
const int KEY_F16 =                305;
const int KEY_F17 =                306;
const int KEY_F18 =                307;
const int KEY_F19 =                308;
const int KEY_F20 =                309;
const int KEY_F21 =                310;
const int KEY_F22 =                311;
const int KEY_F23 =                312;
const int KEY_F24 =                313;
const int KEY_F25 =                314;
const int KEY_KP_0 =               320;
const int KEY_KP_1 =               321;
const int KEY_KP_2 =               322;
const int KEY_KP_3 =               323;
const int KEY_KP_4 =               324;
const int KEY_KP_5 =               325;
const int KEY_KP_6 =               326;
const int KEY_KP_7 =               327;
const int KEY_KP_8 =               328;
const int KEY_KP_9 =               329;
const int KEY_KP_DECIMAL =         330;
const int KEY_KP_DIVIDE =          331;
const int KEY_KP_MULTIPLY =        332;
const int KEY_KP_SUBTRACT =        333;
const int KEY_KP_ADD =             334;
const int KEY_KP_ENTER =           335;
const int KEY_KP_EQUAL =           336;
const int KEY_LEFT_SHIFT =         340;
const int KEY_LEFT_CONTROL =       341;
const int KEY_LEFT_ALT =           342;
const int KEY_LEFT_SUPER =         343;
const int KEY_RIGHT_SHIFT =        344;
const int KEY_RIGHT_CONTROL =      345;
const int KEY_RIGHT_ALT =          346;
const int KEY_RIGHT_SUPER =        347;
const int KEY_MENU =               348;

const int KEY_LAST =               348;

const int MOUSE_BUTTON_LEFT =      0;
const int MOUSE_BUTTON_RIGHT =     1;
const int MOUSE_BUTTON_MIDDLE =    2;

int char_to_digit(u8 digit) {
  if (digit == '0') {
    return 0;
  } else if (digit == '1') {
    return 1;
  } else if (digit == '2') {
    return 2;
  } else if (digit == '3') {
    return 3;
  } else if (digit == '4') {
    return 4;
  } else if (digit == '5') {
    return 5;
  } else if (digit == '6') {
    return 6;
  } else if (digit == '7') {
    return 7;
  } else if (digit == '8') {
    return 8;
  } else if (digit == '9') {
    return 9;
  }

  return -1;
}

float char_to_digitf(u8 digit)
{
  return float(char_to_digit(digit));
}

// Converts a substring into an integer.
//
// Inputs:
//   string: u8[] containing the substring to be parsed
//   start: the index of the first character of the substring
//   end: the index of the last character of the substring
// Outputs:
//   result: the integer represented by the substring
//   returns: true if successful, false otherwise
bool substring_to_integer(u8[] string, int start, int end, out int result) {
  //reject nonsensical input
  int str_length = length(string);
  if (str_length == 0 || end >= str_length || start < 0 || start > end) {
    return false;
  }
  result = 0;
  int i;
  for (i = start; i <= end; i = i + 1) {
    int digit = char_to_digit(string[i]);
    if (digit < 0) {
      return false;
    }
    //compute the place value of this digit
    int place_value = 1;
    int j;
    for (j = 0; j < end - i; j = j + 1) {
      place_value = place_value * 10;
    }
    result = result + digit * place_value;
  }
  return true;
}

bool string_to_integer(u8[] string, out int result)
{
  return substring_to_integer(string, 0, length(string) - 1, result);
}

// Converts a substring into a float.
// The substring must contain a decimal point and can have a leading '-' symbol.
// It may not contain e or E.
// 
// Inputs:
//   string: u8[] containing the substring to be parsed
//   start: the index of the first character of the substring
//   end: the index of the last character of the substring
// Output:
//   result: the float represented by the substring
//   returns: true if successful, false otherwise
bool substring_to_float(u8[] string, int start, int end, out float result) {
  //reject nonsensical input
  int str_length = length(string);
  if (str_length == 0 || end >= str_length || start < 0 || start >= end) {
    return false;
  }
  //check for a leading '-' symbol
  float sign = 1.0;
  if (string[start] == '-') {
    sign = -1.0;
    start = start + 1;
    if (start == end) {
      return false;
    }
  }
  //determine the position of the decimal point
  int point = -1;
  int i;
  for (i = start; i <= end; i = i + 1) {
    if (string[i] == '.') {
      if (point == -1) {
        point = i;
      } else {
        //error: contains multiple decimal points
        return false;
      }
    }
  }
  if (point == -1) {
    //error: no decimal point found
    return false;
  }
  result = 0.;
  //compute the integer part
  if (point > start) {
    int i;
    for (i = start; i < point; i = i + 1) {
      float digit = char_to_digitf(string[i]);
      if (digit < 0.) {
        return false;
      }
      float place_value = 1.;
      int j;
      for (j = 0; j < point - 1 - i; j = j + 1) {
        place_value = place_value * 10.;
      }
      result = result + digit * place_value;
    }
  }
  //compute the decimal part
  if (point < end) {
    int i;
    for (i = point + 1; i <= end; i = i + 1) {
      float digit = char_to_digitf(string[i]);
      if (digit < 0.) {
        return false;
      }
      float place_value = 0.1;
      int j;
      for ( j = 0; j < i - (point + 1); j = j + 1) {
        place_value = place_value / 10.0;
      }
      result = result + digit * place_value;
    }
  }
  result = sign * result;
  return true;
}

bool string_to_float(u8[] string, out float result)
{
  return substring_to_float(string, 0, length(string) - 1, result);
}

// split a string into substrings separated by "sep". For example,
// "aababba" with sep = 'a' returns ["b", "bb"].
u8[][] split(u8[] string, u8 sep)
{
  int num_strings = 0;
  int cur_string_pos = 0;
  int i;

  // count how many strings there will be
  for (i = 0; i <= length(string); i = i + 1) {
    if (i == length(string) || string[i] == sep) {
      if (cur_string_pos != 0)
        num_strings = num_strings + 1;
      cur_string_pos = 0;
    } else {
      cur_string_pos = cur_string_pos + 1;
    }
  }

  u8[][] strings = u8[][](num_strings);
  int cur_string = 0;
  u8[] string_buffer = u8[](4);

  for (i = 0; i <= length(string); i = i + 1) {
    if (i == length(string) || string[i] == sep) {
      if (cur_string_pos != 0) {
        strings[cur_string] = u8[](cur_string_pos);
        int j;
        for (j = 0; j < cur_string_pos; j = j + 1)
          strings[cur_string][j] = string_buffer[j];
        cur_string = cur_string + 1;
      }
      cur_string_pos = 0;
    } else {
      string_buffer[cur_string_pos] = string[i];
      cur_string_pos = cur_string_pos + 1;
      if (cur_string_pos >= length(string_buffer)) {
        // expand string_buffer
        u8[] new_string_buffer = u8[](length(string_buffer) * 2);
        int j;
        for (j = 0; j < cur_string_pos; j = j + 1)
          new_string_buffer[j] = string_buffer[j];
        string_buffer = new_string_buffer;
      }
    }
  }

  return strings;
}

// Parses an obj file such that: 
//   Lines starting with #  and blank lines are ignored.
//   Lines starting with v describe vertices. E.g. v -1.1 43. -.123
//   Lines starting with f describe faces. E.g. f 0 1 2
// Inputs:
//   fpath: path to the obj file
//   numVertices: the number of vertices in the obj file
//   numFaces: the number of faces in the obj file
// Outputs:
//   verts: vec3[] of vertices
//   tris: int[] of face indices
//   returns: true if successful, false otherwise
bool read_obj(u8[] fpath, out vec3[] verts, out int[] tris)
{
  //read file
  u8[] file = read_file(fpath);

  u8[][] lines = split(file, '\n');

  int vcount = 0;
  int fcount = 0;
  int i;
  for (i = 0; i < length(lines); i = i + 1) {
    if (lines[i][0] == 'v')
      vcount = vcount + 1;
    else if (lines[i][0] == 'f')
      fcount = fcount + 1;
    else if (lines[i][0] != '#')
      return false;
  }

  verts = vec3[](vcount);
  tris = int[](3 * fcount);
  vcount = 0;
  fcount = 0;

  for (i = 0; i < length(lines); i = i + 1) {
    u8[][] tokens = split(lines[i], ' ');
    if (lines[i][0] == 'v') {
      if (length(tokens) != 4)
        return false;
      if (!string_to_float(tokens[1], verts[vcount].x))
        return false;
      if (!string_to_float(tokens[2], verts[vcount].y))
        return false;
      if (!string_to_float(tokens[3], verts[vcount].z))
        return false;
      vcount = vcount + 1;
    } else if (lines[i][0] == 'f') {
      if (length(tokens) != 4)
        return false;
      int tmp;
      if (!string_to_integer(tokens[1], tmp))
        return false;
      tris[3*fcount + 0] = tmp - 1;
      if (!string_to_integer(tokens[2], tmp))
        return false;
      tris[3*fcount + 1] = tmp - 1;
      if (!string_to_integer(tokens[3], tmp))
        return false;
      tris[3*fcount + 2] = tmp - 1;
      fcount = fcount + 1;
    }
  }

  return true;
}

@gpu float deg_to_rad(float x)
{
  return x * 0.017453293;
}

@gpu float tan(float x)
{
  return sin(x) / cos(x);
}

@gpu float dot3(vec3 a, vec3 b)
{
  return a.x * b.x + a.y * b.y + a.z * b.z;
}

@gpu vec3 cross(vec3 a, vec3 b)
{
  return vec3(a.y * b.z - a.z * b.y,
              a.z * b.x - a.x * b.z,
              a.x * b.y - a.y * b.x);
}

@gpu float norm3(vec3 x)
{
  return sqrt(dot3(x, x));
}

@gpu vec3 normalize3(vec3 x)
{
  return x * (1.0 / norm3(x));
}

// functions to build transformation matrices

@gpu mat4x4 identity()
{
  return mat4x4(vec4(1., 0., 0., 0.),
                vec4(0., 1., 0., 0.),
                vec4(0., 0., 1., 0.),
                vec4(0., 0., 0., 1.));
}

@gpu mat4x4 scale_x(float scale)
{
  mat4x4 ret = identity();
  ret.x.x = scale;
  return ret;
}

@gpu mat4x4 scale_y(float scale)
{
  mat4x4 ret = identity();
  ret.y.y = scale;
  return ret;
}

@gpu mat4x4 scale_z(float scale)
{
  mat4x4 ret = identity();
  ret.z.z = scale;
  return ret;
}

@gpu mat4x4 rotate_x(float theta)
{
  mat4x4 ret = identity();

  ret.z.z = ret.y.y = cos(theta);
  ret.y.z = sin(theta);
  ret.z.y = -ret.y.z;
  return ret;
}

@gpu mat4x4 rotate_y(float theta)
{
  mat4x4 ret = identity();

  ret.x.x = ret.z.z = cos(theta);
  ret.z.x = sin(theta);
  ret.x.z = -ret.z.x;
  return ret;
}

@gpu mat4x4 rotate_z(float theta)
{
  mat4x4 ret = identity();

  ret.x.x = ret.y.y = cos(theta);
  ret.x.y = sin(theta);
  ret.y.x = -ret.x.y;
  return ret;
}

@gpu mat4x4 translate(vec3 offset)
{
  mat4x4 ret = identity();
  ret.w.x = offset.x;
  ret.w.y = offset.y;
  ret.w.z = offset.z;
  return ret;
}

mat4x4 perspective(float fovy, float aspect,
                   float near, float far)
{
  float top   = tan(deg_to_rad(fovy) / 2.) * near;
  float right = top * aspect;

  mat4x4 ret = identity();
  ret.x.x =  near / right;
  ret.y.y = near / top;
  ret.z.z = -(far + near) / (far - near);
  ret.w.z = -2.0 * far * near / (far - near);
  ret.z.w = -1.0;
  return ret;
}

mat4x4 look_at(vec3 eye, vec3 at, vec3 up)
{
  vec3 n = normalize3(eye - at);
  vec3 u = normalize3(cross(up, n));
  vec3 v = normalize3(cross(n, u));
  return mat4x4(vec4(u.x, v.x, n.x, 0.0),
                vec4(u.y, v.y, n.y, 0.0),
                vec4(u.z, v.z, n.z, 0.0),
                vec4(0.0, 0.0, 0.0, 1.0)) * translate(-eye);
}

