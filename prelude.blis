/* This file is included before any program compiled by the Blis compiler.
 * It is used to implement all the built-in functions that can be implemented
 * in Blis, instead of using a C library or GLSL built-in function.
 */

int char_to_digit(u8 digit) {
  if (digit == '0') {
    return 0;
  } else if (digit == '1') {
    return 1;
  } else if (digit == '2') {
    return 2;
  } else if (digit == '3') {
    return 3;
  } else if (digit == '4') {
    return 4;
  } else if (digit == '5') {
    return 5;
  } else if (digit == '6') {
    return 6;
  } else if (digit == '7') {
    return 7;
  } else if (digit == '8') {
    return 8;
  } else if (digit == '9') {
    return 9;
  }

  return -1;
}

float char_to_digitf(u8 digit)
{
  return float(char_to_digit(digit));
}

// Converts a substring into an integer.
//
// Inputs:
//   string: u8[] containing the substring to be parsed
//   start: the index of the first character of the substring
//   end: the index of the last character of the substring
// Outputs:
//   result: the integer represented by the substring
//   returns: true if successful, false otherwise
bool substring_to_integer(u8[] string, int start, int end, out int result) {
  //reject nonsensical input
  int str_length = length(string);
  if (str_length == 0 || end >= str_length || start < 0 || start > end) {
    return false;
  }
  result = 0;
  int i;
  for (i = start; i <= end; i = i + 1) {
    int digit = char_to_digit(string[i]);
    if (digit < 0) {
      return false;
    }
    //compute the place value of this digit
    int place_value = 1;
    int j;
    for (j = 0; j < end - i; j = j + 1) {
      place_value = place_value * 10;
    }
    result = result + digit * place_value;
  }
  return true;
}

bool string_to_integer(u8[] string, out int result)
{
  return substring_to_integer(string, 0, length(string) - 1, result);
}

// Converts a substring into a float.
// The substring must contain a decimal point and can have a leading '-' symbol.
// It may not contain e or E.
// 
// Inputs:
//   string: u8[] containing the substring to be parsed
//   start: the index of the first character of the substring
//   end: the index of the last character of the substring
// Output:
//   result: the float represented by the substring
//   returns: true if successful, false otherwise
bool substring_to_float(u8[] string, int start, int end, out float result) {
  //reject nonsensical input
  int str_length = length(string);
  if (str_length == 0 || end >= str_length || start < 0 || start >= end) {
    return false;
  }
  //check for a leading '-' symbol
  float sign = 1.0;
  if (string[start] == '-') {
    sign = -1.0;
    start = start + 1;
    if (start == end) {
      return false;
    }
  }
  //determine the position of the decimal point
  int point = -1;
  int i;
  for (i = start; i <= end; i = i + 1) {
    if (string[i] == '.') {
      if (point == -1) {
        point = i;
      } else {
        //error: contains multiple decimal points
        return false;
      }
    }
  }
  if (point == -1) {
    //error: no decimal point found
    return false;
  }
  result = 0.;
  //compute the integer part
  if (point > start) {
    int i;
    for (i = start; i < point; i = i + 1) {
      float digit = char_to_digitf(string[i]);
      if (digit < 0.) {
        return false;
      }
      float place_value = 1.;
      int j;
      for (j = 0; j < point - 1 - i; j = j + 1) {
        place_value = place_value * 10.;
      }
      result = result + digit * place_value;
    }
  }
  //compute the decimal part
  if (point < end) {
    int i;
    for (i = point + 1; i <= end; i = i + 1) {
      float digit = char_to_digitf(string[i]);
      if (digit < 0.) {
        return false;
      }
      float place_value = 0.1;
      int j;
      for ( j = 0; j < i - (point + 1); j = j + 1) {
        place_value = place_value / 10.0;
      }
      result = result + digit * place_value;
    }
  }
  result = sign * result;
  return true;
}

bool string_to_float(u8[] string, out float result)
{
  return substring_to_float(string, 0, length(string) - 1, result);
}

// split a string into substrings separated by "sep". For example,
// "aababba" with sep = 'a' returns ["b", "bb"].
u8[][] split(u8[] string, u8 sep)
{
  int num_strings = 0;
  int cur_string_pos = 0;
  int i;

  // count how many strings there will be
  for (i = 0; i <= length(string); i = i + 1) {
    if (i == length(string) || string[i] == sep) {
      if (cur_string_pos != 0)
        num_strings = num_strings + 1;
      cur_string_pos = 0;
    } else {
      cur_string_pos = cur_string_pos + 1;
    }
  }

  u8[][] strings = u8[][](num_strings);
  int cur_string = 0;
  u8[] string_buffer = u8[](4);

  for (i = 0; i <= length(string); i = i + 1) {
    if (i == length(string) || string[i] == sep) {
      if (cur_string_pos != 0) {
        strings[cur_string] = u8[](cur_string_pos);
        int j;
        for (j = 0; j < cur_string_pos; j = j + 1)
          strings[cur_string][j] = string_buffer[j];
        cur_string = cur_string + 1;
      }
      cur_string_pos = 0;
    } else {
      string_buffer[cur_string_pos] = string[i];
      cur_string_pos = cur_string_pos + 1;
      if (cur_string_pos >= length(string_buffer)) {
        // expand string_buffer
        u8[] new_string_buffer = u8[](length(string_buffer) * 2);
        int j;
        for (j = 0; j < cur_string_pos; j = j + 1)
          new_string_buffer[j] = string_buffer[j];
        string_buffer = new_string_buffer;
      }
    }
  }

  return strings;
}

// Parses an obj file such that: 
//   Lines starting with #  and blank lines are ignored.
//   Lines starting with v describe vertices. E.g. v -1.1 43. -.123
//   Lines starting with f describe faces. E.g. f 0 1 2
// Inputs:
//   fpath: path to the obj file
//   numVertices: the number of vertices in the obj file
//   numFaces: the number of faces in the obj file
// Outputs:
//   verts: vec3[] of vertices
//   tris: int[] of face indices
//   returns: true if successful, false otherwise
bool read_obj(u8[] fpath, out vec3[] verts, out int[] tris)
{
  //read file
  u8[] file = read_file(fpath);

  u8[][] lines = split(file, '\n');

  int vcount = 0;
  int fcount = 0;
  int i;
  for (i = 0; i < length(lines); i = i + 1) {
    if (lines[i][0] == 'v')
      vcount = vcount + 1;
    else if (lines[i][0] == 'f')
      fcount = fcount + 1;
    else if (lines[i][0] != '#')
      return false;
  }

  verts = vec3[](vcount);
  tris = int[](3 * fcount);
  vcount = 0;
  fcount = 0;

  for (i = 0; i < length(lines); i = i + 1) {
    u8[][] tokens = split(lines[i], ' ');
    if (lines[i][0] == 'v') {
      if (length(tokens) != 4)
        return false;
      if (!string_to_float(tokens[1], verts[vcount].x))
        return false;
      if (!string_to_float(tokens[2], verts[vcount].y))
        return false;
      if (!string_to_float(tokens[3], verts[vcount].z))
        return false;
      vcount = vcount + 1;
    } else if (lines[i][0] == 'f') {
      if (length(tokens) != 4)
        return false;
      if (!string_to_integer(tokens[1], tris[3*fcount + 0]))
        return false;
      if (!string_to_integer(tokens[2], tris[3*fcount + 1]))
        return false;
      if (!string_to_integer(tokens[3], tris[3*fcount + 2]))
        return false;
      fcount = fcount + 1;
    }
  }

  return true;
}

// functions to build transformation matrices

@gpu mat4x4 scale_x(float scale)
{
  return mat4x4(vec4(scale, 0., 0., 0.),
                vec4(0., 1., 0., 0.),
                vec4(0., 0., 1., 0.),
                vec4(0., 0., 0., 1.));
}

@gpu mat4x4 scale_y(float scale)
{
  return mat4x4(vec4(1., 0., 0., 0.),
                vec4(0., scale, 0., 0.),
                vec4(0., 0., 1., 0.),
                vec4(0., 0., 0., 1.));
}

@gpu mat4x4 scale_z(float scale)
{
  return mat4x4(vec4(1., 0., 0., 0.),
                vec4(0., 1., 0., 0.),
                vec4(0., 0., scale, 0.),
                vec4(0., 0., 0., 1.));
}

