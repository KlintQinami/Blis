/* This file is included before any program compiled by the Blis compiler.
 * It is used to implement all the built-in functions that can be implemented
 * in Blis, instead of using a C library or GLSL built-in function.
 */

int char_to_digit(u8 digit) {
  if (digit == '0') {
    return 0;
  } else if (digit == '1') {
    return 1;
  } else if (digit == '2') {
    return 2;
  } else if (digit == '3') {
    return 3;
  } else if (digit == '4') {
    return 4;
  } else if (digit == '5') {
    return 5;
  } else if (digit == '6') {
    return 6;
  } else if (digit == '7') {
    return 7;
  } else if (digit == '8') {
    return 8;
  } else if (digit == '9') {
    return 9;
  }

  return -1;
}

float char_to_digitf(u8 digit)
{
  return float(char_to_digit(digit));
}

// Converts a substring into an integer.
//
// Inputs:
//   string: u8[] containing the substring to be parsed
//   start: the index of the first character of the substring
//   end: the index of the last character of the substring
// Outputs:
//   result: the integer represented by the substring
//   returns: true if successful, false otherwise
bool substring_to_integer(u8[] string, int start, int end, out int result) {
  //reject nonsensical input
  int str_length = length(string);
  if (str_length == 0 || end >= str_length || start < 0 || start > end) {
    return false;
  }
  result = 0;
  int i;
  for (i = start; i <= end; i = i + 1) {
    int digit = char_to_digit(string[i]);
    if (digit < 0) {
      return false;
    }
    //compute the place value of this digit
    int place_value = 1;
    int j;
    for (j = 0; j < end - i; j = j + 1) {
      place_value = place_value * 10;
    }
    result = result + digit * place_value;
  }
  return true;
}

bool string_to_integer(u8[] string, out int result)
{
  return substring_to_integer(string, 0, length(string) - 1, result);
}

// Converts a substring into a float.
// The substring must contain a decimal point and can have a leading '-' symbol.
// It may not contain e or E.
// 
// Inputs:
//   string: u8[] containing the substring to be parsed
//   start: the index of the first character of the substring
//   end: the index of the last character of the substring
// Output:
//   result: the float represented by the substring
//   returns: true if successful, false otherwise
bool substring_to_float(u8[] string, int start, int end, out float result) {
  //reject nonsensical input
  int str_length = length(string);
  if (str_length == 0 || end >= str_length || start < 0 || start >= end) {
    return false;
  }
  //check for a leading '-' symbol
  float sign = 1.0;
  if (string[start] == '-') {
    sign = -1.0;
    start = start + 1;
    if (start == end) {
      return false;
    }
  }
  //determine the position of the decimal point
  int point = -1;
  int i;
  for (i = start; i <= end; i = i + 1) {
    if (string[i] == '.') {
      if (point == -1) {
        point = i;
      } else {
        //error: contains multiple decimal points
        return false;
      }
    }
  }
  if (point == -1) {
    //error: no decimal point found
    return false;
  }
  result = 0.;
  //compute the integer part
  if (point > start) {
    int i;
    for (i = start; i < point; i = i + 1) {
      float digit = char_to_digitf(string[i]);
      if (digit < 0.) {
        return false;
      }
      float place_value = 1.;
      int j;
      for (j = 0; j < point - 1 - i; j = j + 1) {
        place_value = place_value * 10.;
      }
      result = result + digit * place_value;
    }
  }
  //compute the decimal part
  if (point < end) {
    int i;
    for (i = point + 1; i <= end; i = i + 1) {
      float digit = char_to_digitf(string[i]);
      if (digit < 0.) {
        return false;
      }
      float place_value = 0.1;
      int j;
      for ( j = 0; j < i - (point + 1); j = j + 1) {
        place_value = place_value / 10.0;
      }
      result = result + digit * place_value;
    }
  }
  result = sign * result;
  return true;
}

bool string_to_float(u8[] string, out float result)
{
  return substring_to_float(string, 0, length(string) - 1, result);
}

