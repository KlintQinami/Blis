@vertex vec4 vshader(vec3 pos)
{
  return vec4(pos.x, pos.y, pos.z, 1.);
}

@fragment void fshader(uniform vec3 u_color, out vec3 color)
{
  color = u_color;
}

pipeline my_pipeline {
  @vertex vshader;
  @fragment fshader;
};

int main()
{
  window win = window(1024, 768, false);

  set_active_window(win);

  buffer<vec3> b = buffer<vec3>();

  upload_buffer(b,
    vec3[3](vec3(-1., -1., 0.),
            vec3(1.,  -1., 0.),
            vec3(0.,  1.,  0.)));

  pipeline my_pipeline p = pipeline my_pipeline(false);
  p.pos = b;
  vec3 color = vec3(0., 0.5, 0.5);
  bool increasing = true;

  while (true) {
    if (increasing) {
      color.x = color.x + 0.05;
      if (color.x > 1.0) {
        color.x = 1.0;
        increasing = false;
      }
    } else {
      color.x = color.x - 0.05;
      if (color.x < 0.0) {
        color.x = 0.0;
        increasing = true;
      }
    }

    p.u_color = color;
    draw(p, 3);
    swap_buffers(win);
    poll_events();
    if (window_should_close(win))
      break;
  }

  return 0;
}
